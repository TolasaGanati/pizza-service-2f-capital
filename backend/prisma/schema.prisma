generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider                 = "prisma-json-schema-generator"
  output                   = "./generated-schema.json"
  keepRelationScalarFields = "true"
  includeRequiredFields    = "true"
  persistOriginalType      = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  RESTAURANT_MANAGER
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  password    String
  email       String       @unique
  role        String // 'customer' or 'restaurant_manager'
  createdAt   DateTime     @default(now())
  restaurants Restaurant[] @relation("UserRestaurants")
  orders      Order[]      @relation("UserOrders")
}

// Define the Restaurant model
model Restaurant {
  id           Int      @id @default(autoincrement())
  name         String
  address      String
  phone        String?
  superAdminId Int?
  createdAt    DateTime @default(now())
  superAdmin   User?    @relation("UserRestaurants", fields: [superAdminId], references: [id], onDelete: Cascade)
  pizzas       Pizza[]  @relation("RestaurantPizzas")
  Order        Order[]
}

// Define the Pizza model
model Pizza {
  id           Int            @id @default(autoincrement())
  restaurantId Int
  name         String
  description  String?
  createdAt    DateTime       @default(now())
  restaurant   Restaurant     @relation("RestaurantPizzas", fields: [restaurantId], references: [id], onDelete: Cascade)
  toppings     PizzaTopping[] @relation("PizzaToppings") // Reference to PizzaTopping
  OrderItem    OrderItem[]
}

// Define the Topping model
model Topping {
  id           Int            @id @default(autoincrement())
  name         String
  pizzas       PizzaTopping[] @relation("ToppingPizzas") // Renamed for clarity
  OrderTopping OrderTopping[]
}

// Define the PizzaTopping model for the many-to-many relationship
model PizzaTopping {
  pizzaId   Int
  toppingId Int
  pizza     Pizza   @relation("PizzaToppings", fields: [pizzaId], references: [id], onDelete: Cascade)
  topping   Topping @relation("ToppingPizzas", fields: [toppingId], references: [id], onDelete: Cascade)

  @@id([pizzaId, toppingId]) // Composite primary key
}

// Define the Order model
model Order {
  id           Int         @id @default(autoincrement())
  userId       Int
  restaurantId Int
  status       String      @default("Pending") // Order status (Pending, Preparing, Delivered)
  createdAt    DateTime    @default(now())
  user         User        @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[] @relation("OrderItems")
}

// Define the OrderItem model
model OrderItem {
  id            Int            @id @default(autoincrement())
  orderId       Int
  pizzaId       Int
  quantity      Int            @default(1)
  createdAt     DateTime       @default(now())
  order         Order          @relation("OrderItems", fields: [orderId], references: [id], onDelete: Cascade)
  pizza         Pizza          @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
  orderToppings OrderTopping[] @relation("OrderToppings")
}

// Define the OrderTopping model for the many-to-many relationship with OrderItems
model OrderTopping {
  orderItemId Int
  toppingId   Int
  orderItem   OrderItem @relation("OrderToppings", fields: [orderItemId], references: [id], onDelete: Cascade)
  topping     Topping   @relation(fields: [toppingId], references: [id], onDelete: Cascade)

  @@id([orderItemId, toppingId]) // Composite primary key
}
